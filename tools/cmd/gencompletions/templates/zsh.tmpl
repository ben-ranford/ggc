#compdef ggc
# Code generated by go run tools/cmd/gencompletions/main.go; DO NOT EDIT.

_ggc() {
    local context state line
    typeset -A opt_args

    _arguments -C \
        '1: :_ggc_commands' \
        '*::arg:->args'

    case $state in
        args)
            case $line[1] in
{{- range .Commands }}
{{- if needsHandler . }}
                {{ .Name }})
                    _ggc_{{ .Name }}
                    ;;
{{- end }}
{{- end }}
            esac
            ;;
    esac
}

_ggc_commands() {
    local commands
    commands=(
{{- range .Commands }}
        '{{ .Name }}:{{ escapeZsh .Summary }}'
{{- end }}
    )
    _describe 'commands' commands
}

{{- range .Commands }}
{{- if needsHandler . }}
_ggc_{{ .Name }}() {
{{- if gt (len .Subcommands) 0 }}
    local subcommands
    subcommands=(
{{- range .Subcommands }}
        '{{ .Name }}:{{ escapeZsh .Summary }}'
{{- end }}
    )
    if (( CURRENT == 2 )); then
        _describe '{{ .Name }} subcommands' subcommands
{{- if eq .Name "rebase" }}
        case $words[$CURRENT] in
            (continue|abort|skip|interactive)
                ;;
            (*)
                local branches
                branches=(${(f)"$(ggc __complete branch 2>/dev/null)"})
                if [[ ${#branches[@]} -gt 0 ]]; then
                    _describe 'branches' branches
                fi
                ;;
        esac
        return
{{- end }}
    fi
{{- end }}
{{- if gt (len .KeywordSubcommands) 0 }}
    case $words[2] in
{{- range .KeywordSubcommands }}
        {{ .Name }})
            if (( CURRENT == 3 )); then
                _values 'keyword'{{ range .Keywords }} '{{ . }}'{{ end }}
            fi
            return
            ;;
{{- end }}
    esac
{{- end }}
{{- if eq .Name "branch" }}
    if [[ $words[2] == "checkout" ]]; then
        local branches
        branches=(${(f)"$(ggc __complete branch 2>/dev/null)"})
        if [[ ${#branches[@]} -gt 0 ]]; then
            _describe 'branches' branches
        fi
        if (( CURRENT == 3 )); then
{{- $checkout := subcommandBy . "checkout" }}
{{- if $checkout }}
            _values 'keyword'{{ range $checkout.Keywords }} '{{ . }}'{{ end }}
{{- end }}
        fi
        return
    fi
{{- end }}
{{- if eq .Name "add" }}
    local files
    files=(${(f)"$(ggc __complete files 2>/dev/null)"})
    if [[ ${#files[@]} -gt 0 ]]; then
        _describe 'files' files
    else
        _files
    fi
{{- end }}
}

{{- end }}
{{- end }}

compdef _ggc ggc
